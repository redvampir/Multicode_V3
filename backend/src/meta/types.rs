use chrono::{DateTime, Utc};
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;

/// Начальное значение версии схемы метаданных.
pub const DEFAULT_VERSION: u32 = 1;

fn default_version() -> u32 {
    DEFAULT_VERSION
}

/// Additional notes provided by AI.
#[derive(Debug, Clone, Serialize, Deserialize, Default, JsonSchema)]
#[schemars(deny_unknown_fields)]
pub struct AiNote {
    /// Optional description generated by AI.
    pub description: Option<String>,
    /// Optional hints helping the user.
    #[serde(default)]
    pub hints: Vec<String>,
}

/// Metadata stored inside `@VISUAL_META` comments.
#[derive(Debug, Clone, Serialize, Deserialize, JsonSchema)]
#[schemars(deny_unknown_fields)]
pub struct VisualMeta {
    /// Schema version of this metadata.
    #[serde(default = "default_version")]
    pub version: u32,
    /// Identifier linking this metadata to AST nodes.
    pub id: String,
    /// X coordinate on the canvas.
    pub x: f64,
    /// Y coordinate on the canvas.
    pub y: f64,
    /// Optional tags associated with this block.
    #[serde(default)]
    pub tags: Vec<String>,
    /// Optional links to other blocks.
    #[serde(default)]
    pub links: Vec<String>,
    /// Optional test commands to run for this block.
    #[serde(default)]
    pub tests: Vec<String>,
    /// Optional identifier of a base metadata this entry extends.
    #[serde(default)]
    pub extends: Option<String>,
    /// Optional reverse path to the original external file.
    #[serde(default)]
    pub origin: Option<String>,
    /// Optional translations for block labels.
    #[serde(default)]
    pub translations: HashMap<String, String>,
    /// Optional AI-generated note.
    #[serde(default)]
    pub ai: Option<AiNote>,
    /// Optional plugin-specific metadata.
    #[serde(default)]
    pub extras: Option<Value>,
    /// Timestamp of last update in UTC.
    #[serde(default)]
    pub updated_at: DateTime<Utc>,
}

